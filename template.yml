AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Gales Sales XLS Reports Service

Parameters:
  IAMUsername:
    Description: Username of the IAM user for this service
    Type: String
    Default: sysadmin
  ParamKMSKeyID:
    Description: KMS key id
    Type: String
  ParamThundraKey:
    Description: thundra.io API key
    Type: String
  ParamReportBucket:
    Description: Bucket for report files
    Type: String
  ParamProjectName:
    Description: Project name
    Type: String

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    DeletionPolicy: Delete
    DependsOn: Lambda
    Properties:
      StageName: Prod
      # We're adding all essential headers (I hope) in the handler files, this property is not required
      # Cors: "'*'"
      # Cors:
      #   AllowMethods: "'GET,OPTIONS,POST,PUT'"
      #   AllowHeaders: "'Authorization,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      #   AllowOrigin: "'*'"
      # EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthLambda.Arn
            Identity:
              ReauthorizeEvery: 300
      # Documentation for below: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#gateway-response-object
      # Oddly, this property does not work with sam local
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              # Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
              # WWW-Authenticate: >- 
                # 'Bearer realm="admin"'

      # Docs for this at: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#gateway-response-object
      # Domain:
      #   DomainName: String # REQUIRED | custom domain name being configured on the api, "www.example.com"
      #   CertificateARN: String # REQUIRED | Must be a valid [certificate ARN](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html), and for EDGE endpoint configuration the certificate must be in us-east-1
      #   EndpointConfiguration: "EDGE" # optional | Default value is REGIONAL | Accepted values are EDGE | REGIONAL
      #   BasePath:
      #     - String # optional | Default value is '/' | List of basepaths to be configured with the ApiGateway Domain Name 
      #   Route53: # optional | Default behavior is to treat as None - does not create Route53 resources | Enable these settings to create Route53 Recordsets
      #     HostedZoneId: String # REQUIRED | Must be a hostedzoneid value of a [`AWS::Route53::HostedZone`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html) resource
      #     EvaluateTargetHealth: Boolean # optional | default value is false
      #     DistributionDomainName: String # OPTIONAL if the EndpointConfiguration is EDGE | Default points to Api Gateway Distribution | Domain name of a [cloudfront distribution](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html) 


  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: go1.x
      CodeUri: ./dist
      Handler: /report
      Role: !GetAtt LambdaRole.Arn
      Timeout: 20 # for testing only
      MemorySize: 512
      Environment:
        Variables:
          Stage: prod
          thundra_apiKey: !Ref ParamThundraKey
          thundra_agent_lambda_report_cloudwatch_enable: false
          thundra_lambda_warmup_warmupAware: true
          thundra_agent_lambda_warmup_warmupAware: true
      VpcConfig:
        # TODO: these should be extracted into params and .env file
        SecurityGroupIds:
          - sg-5afb2932
          - sg-8f6baee7
        SubnetIds:
          - subnet-0da8d176
          - subnet-7f092816
      Tags:
        BillTo: 'Gales'
      Events:
        Report:
          Type: Api
          Properties:
            Path: /report
            Method: POST
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: LambdaTokenAuthorizer
        Ping:
          Type: Api
          Properties:
            Path: /report
            Method: GET
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: NONE
        Options:
          Type: Api
          Properties:
            Path: /report
            Method: OPTIONS
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: NONE

  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: /authorizer
      Runtime: go1.x
      Role: !GetAtt AuthLambdaRole.Arn
      Environment:
        Variables:
          thundra_apiKey: !Ref ParamThundraKey
          thundra_agent_lambda_report_cloudwatch_enable: false
          thundra_lambda_warmup_warmupAware: true
          thundra_agent_lambda_warmup_warmupAware: true
      Tags:
        BillTo: 'Gales'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParametersByPath
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/${ParamProjectName}*
      - PolicyName: FunctionKMS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ParamKMSKeyID}
      - PolicyName: FunctionLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: FunctionXRayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
      - PolicyName: FunctionS3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: 
              # - Fn::Sub: arn:aws:s3:::${ParamLambdaBucket}/*
              Fn::Sub: arn:aws:s3:::${ParamReportBucket}/*
      - PolicyName: FunctionVPCAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            Resource: '*'

  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParametersByPath
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/${ParamProjectName}*
      - PolicyName: FunctionKMS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ParamKMSKeyID}
      - PolicyName: FunctionLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'

Outputs:
  ApiId:
    Description: API ID
    Value:
      Ref: RestApi
  ApiEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiArn:
    Description: "API ARN"
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/"
  LambdaArn:
    Description: "Lambda ARN"
    Value: !GetAtt Lambda.Arn
  AuthLambdaArn:
    Description: "Authorizer Lambda ARN"
    Value: !GetAtt AuthLambda.Arn
  LambdaRoleArn:
    Description: "Lambda Role ARN"
    Value: !GetAtt LambdaRole.Arn
  AuthLambdaRoleArn:
    Description: "Authorizer Lambda Role ARN"
    Value: !GetAtt AuthLambdaRole.Arn